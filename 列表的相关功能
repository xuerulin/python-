2. list列表的常用操作
list() 方法用于将元组转换为列表。
2.1 列表的索引
直接用中括号[ ]索引其下标即可，或用for循环遍历所有的值
a = [1,2,3]
print(a[1])     #输出2,因为一个list列表的下标从0开始，按照0, 1, 2,...的顺序排列
print(a[-1])    #输出3
for i in a:
    print(i) #输出1 2 3
    
2.2 列表的分片操作（slice）
用[左边界下标：右边界下标：步长]截取list中特定的一段，注意是左闭右开的区间，即包含左边界，但是不包含右边界
a = [1,2,3,4,5]
print(a[1:3])     #输出[2,3]
print(a[:4])      #输出[1,2,3,4]
print(a[2:])      #输出[3,4,5]
print(a[2:10]     #输出[3,4,5]
print(a[0:3:2])      #输出[1,3]
print(a[2:0:-1])     #输出[3,2]

2.3 列表删除元素
① 用del函数删除列表指定位置的元素
del(list1[index]) #删除list1中index位置的元素（index也可以表示一个范围，如[1, 3]）
② 用pop函数剔除队尾元素，并将其返回
a = list1.pop(index) #将list1中index位置元素剔除并赋值给a，默认删除最后一个元素
③ 用remove函数删除列表中值为指定值的元素
list1.remove(value) #删除list中值为value的元素
④ 用clear函数彻底清空列表全部内容
list1.clear() #清空list1的全部内容
⑤ 用分片赋值空列表的办法删除元素
list1 = [1, 2, 3, 4, 5] list1[2:] = [] list1 # 输出[1, 2]

2.4 列表的拼接
可以简单的用 + 将两个列表连接起来
a = [1, 2]
b = [3]
c = a + b
那么c = [1, 2, 3]
用extend函数拼接两个列表
list1.extend(list2) #在list1后面接上list2

2.5 列表的重复
可以将一个列表直接乘一个数字n获得n倍重复后的列表，相当于n个这样的列表连接起来
a = [0]
b = a * 5
那么b = [0, 0, 0, 0, 0]

2.6 元素成员判断（判断一个元素是否存在一个列表中）
a = [1, 2, 3, 4, 5]
b = 2
print(b in a)

2.7 求列表的长度
len([1, 2, 3])   #列表的长度为3

2.8 求列表的最大、最小值
max([1, 2, 3])   #最大值为3

2.9 在列表中插入元素
①append函数在队尾插入元素
list1.append(5)  #在list1的最后插入元素5
②insert函数在任意位置插入元素
list1.insert(index, data) #在指定位置（index处）插入元素data
③extend()函数在尾部扩展一个新列表
list1 = [1]
list1.extend([2, 3])  # list1为[1, 2, 3]

2.10 反转一个列表
list1.reverse() #翻转整个列表，即第一个与最后一个互换，第二个与倒数第二个互换....

2.11 计算列表中指定元素x的个数
times = list.count(x)

2.12 查找列表中指定元素的位置
index(X) 查找list中元素X的位置（若重复出现，则以第一次出现的为准）
a = [1, 2, 3, 4, 5] 
a.index(2) #结果为1

2.13 （浅）复制一个list
list2 = list1.copy() #将list1的内容复制给list2
注意这里与list2 = list1是有区别的，python中列表的直接赋值是一个传址操作，即改变list2的值也会同时影响list1的值
#但是copy函数进行的是一个传值操作，即改变list2的值对list1无影响
#浅复制的意思是若列表中嵌套一个列表，则对内部的列表仍然是传址复制

2.14 列表的排序：sort方法与sorted（）函数
① sort方法
list1 = [(1,6),(3,4),(2,5)]
list1.sort(key=lambda x:x[1], reverse=True)  # 根据第二个元素，降序排列
# 输出:[(1, 6), (2, 5), (3, 4)]
② sorted()函数：
与sort方法功能类似，但是sorted()函数有返回值，返回的是排序后的结果。

二、字典（dict）
字典与列表最大的区别就是字典强调的是“键值对”，key与value一一对应，字典中的存放顺序并不重要，重要的是“键”和“值的对应关系”
1.1  字典的创建(字典中每一对数据都是“键”和“值”相对应的)
a = {key1:value1, key2:value2}  # 第一种
a = dict(key1=value1, key2=value2)  # 第二种，注意此种情况下键必须为字符串
a = {}
a[key1] = value1  
a[key2] = value2  # 第三种
a = dict([(key1, value1), (key2, value2)])  # 第四种
a = dict(zip([key1, key2], [value1, value2]))  # 第四种衍生，使用zip函数把键列表和值列表打包成键值对一一对应的元组（即第四种方法）
a = dict.fromkeys([key1, key2], value)  # 第五种，这种情况适用于多个键对应相同值的情况
a = {x: x**2 for x in [1, 2, 3]}  # 第六种，字典推导表达式

1.2  字典的索引
dict1[key] 
#key是字典的键，返回的是对应的值value

dict1.get(key)
#get方法获取键的值，若键不存在，则返回设定的默认值default（默认为None）--与`[key]`获取值的区别是，
get方法遇到键不存在的时候会返回设定值，而直接索引遇到键不存在时会报错“missing-key”

1.3 字典的遍历
for i in dict1.keys():
    print(i, dict1[keys])  # 遍历字典中所有的键，并输出键值对
for i in dict1:  # 该方法与上述方法等价
for keys, values in dict1.items():  # 遍历字典中所有的键值对

1.4 字典的排序
对字典的排序有两种方法：

1.借助.keys()方法和list()函数将键提取成list，对list排序后输出
D = {'a':1, 'c':3, 'b':2}
D1 = list(D.keys())
D1.sort()
for i in D1: 
    print(i, D[i])
# 输出：
# a 1
# b 2
# c 3
2.借助内置的sorted()函数可对任意对象类型排序，返回排序后的结果
tips:对于sorted（字典）来说，返回的是排序好的keys（以list的形式）
D = {'a':1, 'c':3, 'b':2}
for i in sorted(D):
    print(i, D[i])
# 输出：
# a 1
# b 2
# c 3

1.5 字典的常用操作
.keys()（方法）获取所有键\.values()（方法）获取所有值 .items() | （方法）获取所有“键+值”

三、元组（tuple）
元组类似于列表，是一个基于位置的有序对象集合，但是元组一旦创建之后就不能更改，因此列表中修改元素的操作对于元组都不适用。
1.1 元组的创建
t = (1, 2, 3)
t = tuple([1, 2])
特别说明，当元组中仅有一个元素时，要以逗号结尾。这是因为小括号同样可以把表达式括起来，为了与此区分开来
，因此在单一对象元组是要在括号内加一个,用以区分。
t = (1)  # 表达式 
t = (1,)  # 元组

1.2 元组的方法
index方法：根据元素找到其位置
>>> t.index(1, 2)  # 寻找第2个元素1的位置
count方法：返回元素的个数
>>> t.count(2)

1.3 namedtuple -有名元组
python标准库的collections模块提供了namedtuple有名元组，实现了同时支持使用序号和属性名访问。
有名元组的属性来自类，因此并不与字典的键完全一样，但他们方便记忆：
from collections import namedtuple
A = namedtuple('tt', ['a','b','c'])
bon = A('d','e','f')
bon
输出：tt(a='d', b='e', c='f')

四、集合（set）
Python中的集合类似于数学中的集合概念，它是一组无序、不可重复数据的组合。集合用{ ...}创建，某种程度上可以把集合看作是没有值的字典。
1.1 集合的创建
s = {'s', 'e', 't'}
s = set(['a, b, c, d, e'])
{x * 2 for x in 'abc'}  #{'aa', 'bb', 'cc} 
{x **2 for x in range(1,5)}   #{1, 4, 9, 16}

1.2 集合的常用操作
set1 `&` set2 #交运算
set1 `|` set2 #并运算
set1 `-` set2 #差运算，set1减去set1 `&` set2部分

1.3 集合的常用方法set1.add('x')  #添加元素。注意：集合中只能包含可哈希的对象，即list，dict都不能嵌入到集合中
set1.union(...)  #取并集，效果等同于 | ,但是括号里可以是list，tuple，其他dict甚至是dict
set1.intersection(...)  #取交集，同上
set1.issubset(set2)  #判断set1是否是set2的子集

1.4 集合的不可变性与frozenset
a = frozenset([1, 2, 3])
b = set([1, 2, a])    #b为{frozenset({1, 2, 3}), 1, 2}
